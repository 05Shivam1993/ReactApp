{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","class","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","showAlert","newText","toUpperCase","place","effect","toLowerCase","split","cap_text","i","length","lower","charAt","slice","document","getElementById","select","navigator","clipboard","writeText","new_text","replace","Alert","alert","role","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.85fb3a8a.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <Link className=\"navbar-brand\" to=\"\">{props.title}</Link>\r\n      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav\">\r\n          <li className=\"nav-item active\">\r\n            <Link className=\"nav-link\" to=\"/Text-Utils\">Home <span className=\"sr-only\">(current)</span></Link>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">About us</Link>\r\n          </li> */}\r\n          {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/\">Contact</Link>\r\n          </li> */}\r\n        </ul>\r\n          <div className={`custom-control custom-switch text-${props.mode === 'light'?'dark':'light'} mx-1`}>\r\n            <input type=\"checkbox\" className=\"custom-control-input\" onClick={props.toggleMode} id=\"customSwitches\"/>\r\n            <label className=\"custom-control-label\" htmlFor=\"customSwitches\" >{props.mode === 'light'?'Enable Dark Mode':'Enable Light Mode'}</label>\r\n          </div>\r\n      </div>\r\n      \r\n    </nav>\r\n    )\r\n}\r\n","import React, { useState }  from  'react'\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nexport default function TextForm(props) {\r\n   const [text, setText] = useState(\"\")\r\n   const onChangeHandle = (event)=>{\r\n        setText(event.target.value)\r\n   }\r\n   const convertToUpper = ()=>{\r\n       props.showAlert(\"Converted to UpperCase\",\"success\");\r\n       let newText = text.toUpperCase();\r\n       setText(newText);\r\n   }\r\n   const convertToLower = ()=>{\r\n    props.showAlert(\"Converted to LowerCase\",\"success\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n}\r\n    const convertToCapitalize = ()=>{\r\n        props.showAlert(\"Text has been Capitalize\",\"success\");\r\n        let newText = text.split(\" \");\r\n        let cap_text= \"\";\r\n        for (let i = 0; i < newText.length; i++) {\r\n            const lower = newText[i].toLowerCase();\r\n            cap_text += newText[i].charAt(0).toUpperCase() + lower.slice(1) + \" \";\r\n          }\r\n        setText(cap_text);\r\n    }\r\n    const clearText = ()=>{\r\n        props.showAlert(\"Text has been removed\",\"success\");\r\n        let newText = \"\";\r\n        setText(newText);\r\n    }\r\n    const copyText = ()=>{\r\n        props.showAlert(\"Text has been copied\",\"success\");\r\n        let text = document.getElementById(\"exampleFormControlTextarea1\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n    const handleSpace = ()=>{\r\n        props.showAlert(\"Extra spaces has been removed\",\"success\");\r\n        let new_text = text.replace(/\\s+/g,' ');;\r\n        setText(new_text);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container my-4\" style={{color:props.mode === 'dark'?'white':'#042743'}}>\r\n        <h1>Text Analyzer</h1>\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"exampleFormControlTextarea1\">{props.heading}</label>\r\n            <textarea className=\"form-control\" value={text} onChange={onChangeHandle}  style={{color:props.mode === 'dark'?'white':'#042743',backgroundColor:props.mode === 'dark'?'grey':'white'}} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" data-tip data-for=\"upper\" onClick={convertToUpper}>Upper</button>\r\n        <ReactTooltip id=\"upper\" place=\"top\" effect=\"solid\" id=\"upper\">Convert into uppercase</ReactTooltip>\r\n        <button className=\"btn btn-success mx-1\" data-tip data-for=\"lower\" onClick={convertToLower}>Lower</button>\r\n        <ReactTooltip id=\"upper\" place=\"top\" effect=\"solid\" id=\"lower\"> Convert into lowercase</ReactTooltip>\r\n        <button className=\"btn btn-warning mx-1 my-2\" data-tip data-for=\"title\" onClick={convertToCapitalize}>Capitalize</button>\r\n        <ReactTooltip id=\"upper\" place=\"top\" effect=\"solid\" id=\"title\">Convert into titlecase</ReactTooltip>\r\n        <button className=\"btn btn-danger mx-1 my-2\" data-tip data-for=\"clear\" onClick={clearText}>Clear</button>\r\n        <ReactTooltip id=\"upper\" place=\"top\" effect=\"solid\" id=\"clear\">Clear all text</ReactTooltip>\r\n        <button className=\"btn btn-secondary mx-1 my-2\" data-tip data-for=\"copy\" onClick={copyText}>Copy</button>\r\n        <ReactTooltip id=\"upper\" place=\"top\" effect=\"solid\" id=\"copy\"> Copy the whole text</ReactTooltip>\r\n        <button className=\"btn btn-info mx-1 my-2\" data-tip data-for=\"space\" onClick={handleSpace}>Spaces</button>\r\n        <ReactTooltip id=\"upper\" place=\"top\" effect=\"solid\" id=\"space\">Remove extra spaces</ReactTooltip>\r\n        </div>\r\n        <div className=\"container\" style={{color:props.mode === 'dark'?'white':'#042743'}}>\r\n            <h3>Text Summary</h3>\r\n            <p>Total Number of words is {text.split(\" \").length - 1} and characters is {text.length}</p>\r\n            <p>{0.008 * text.split(\" \").length} minutes required to read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length > 0 ? text:\"Enter text in the box to preview it here\" }</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const convertToCapitalize = (word)=>{\r\n        return props.alert.type.charAt(0).toUpperCase() + props.alert.type.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{convertToCapitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport Alert from './components/Alert';\r\nimport React, { useState } from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light')\r\n  const [alert, setAlert] = useState(null)\r\n  const showAlert = (message,type)=>{\r\n    setAlert({\r\n      msg:message,\r\n      type:type\r\n    })\r\n    setTimeout(()=>{\r\n      setAlert(null)\r\n    },1500)\r\n  }\r\n  const toggleMode = ()=>{\r\n    if (mode === 'light'){\r\n       setMode('dark');\r\n       document.body.style.backgroundColor = '#042743';\r\n       showAlert(\"Dark mode has been enabled\",\"success\")\r\n    }\r\n    else{\r\n       setMode('light');\r\n       document.body.style.backgroundColor = 'white';\r\n       showAlert(\"Light mode has been enabled\",\"success\")\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Router>\r\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\r\n    <Alert alert={alert}/>\r\n    <div className=\"container\">\r\n     <Routes>\r\n          <Route exact path=\"/Text-Utils\" element={<TextForm heading=\"Enter text here to analyze !\" mode={mode} showAlert={showAlert}/>}/>\r\n      </Routes>\r\n    </div>\r\n    </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}